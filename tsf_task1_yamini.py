# -*- coding: utf-8 -*-
"""TSF-Task1-Yamini.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YclKRA1rZagr5RJ62O003ljqjk-7fwRr

# **Prediction using Supervised ML**
# **Yamini Chalapaka - GRIPMAY'23**
# **TASK-1**

**Importing Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline   
#to plot graphs in the same cell

"""**Loading the dataset**"""

url = "https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv"
data = pd.read_csv(url)

print('Required dataset is imported')
data.head(15)

"""**Plotting of dataset**"""

data.plot(x = 'Hours', y = 'Scores', style = 'o', color = 'purple')
plt.title('Hours vs Percentage')
plt.xlabel('Hours studied')
plt.ylabel('Percentage Score')
plt.grid(color = 'grey')
plt.show()

"""**Inputs and Outputs of the data**"""

X = data.iloc[:, :-1].values
y = data.iloc[:, 1].values

"""**Training and Testing the algorithm**"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

"""**Modelling and training Linear Regression**"""

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)

print('Therefore, training is completed')

"""**Plotting the regression line**"""

reg_line = model.coef_*X+model.intercept_
#y = m*x + c

"""**Plotting for Testing data**"""

data.plot(x = 'Hours', y = 'Scores', style = '*', color = 'purple')
plt.scatter(X, y)
plt.plot(X, reg_line)
plt.grid(color = 'grey')
plt.show()

"""**Generating Predictions**"""

print(X_test)
y_pred = model.predict(X_test)
print(y_pred)

"""**Comparing the Actual and Predicted values**"""

df = pd.DataFrame({'Actual values': y_test, 'Predicted values' : y_pred})
df

"""**Model evaluation**"""

from sklearn import metrics
print('Mean Absolute Error:',
      metrics.mean_absolute_error(y_test, y_pred))

"""**Test case-1**"""

model.predict([[7.85]])

"""**Thus, if a student studies for 7.85 hrs/day, the obtained score is 78.83**

**Test case-2**
"""

model.predict([[4.30]])

"""**Thus, if a student studies for 4.30 hrs/day, the obtained score is 44.45**"""